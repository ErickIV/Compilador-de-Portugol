"""
Compilador Portugol - M√≥dulo Principal

Este m√≥dulo orquestra todo o processo de compila√ß√£o:
1. An√°lise L√©xica (Lexer)
2. An√°lise Sint√°tica (Parser) 
3. An√°lise Sem√¢ntica (Semantic)
4. Gera√ß√£o de C√≥digo (CodeGen)
"""

import sys
from typing import Optional
from .lexer import Lexer
from .parser import Parser
from .semantic import AnalisadorSemantico
from .codegen import GeradorDeCodigo
from .exceptions import CompiladorError


class CompiladorPortugol:
    """
    Compilador principal para a linguagem Portugol
    
    Coordena todas as fases da compila√ß√£o e fornece interface
    unificada para o processo de compila√ß√£o completo.
    """
    
    def __init__(self, debug: bool = False):
        """
        Inicializa o compilador
        
        Args:
            debug: Se True, imprime informa√ß√µes de debug
        """
        self.debug = debug

    def compilar_arquivo(self, caminho_arquivo: str, 
                        arquivo_saida: Optional[str] = None,
                        salvar_arquivo: bool = False) -> bool:
        """
        Compila um arquivo Portugol para Python
        
        Args:
            caminho_arquivo: Caminho para o arquivo .por
            arquivo_saida: Caminho para o arquivo Python de sa√≠da (opcional)
            salvar_arquivo: Se True, salva o arquivo Python gerado
            
        Returns:
            bool: True se compila√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            # Ler arquivo fonte
            with open(caminho_arquivo, 'r', encoding='utf-8') as arquivo:
                codigo_fonte = arquivo.read()
            
            # Compilar c√≥digo
            codigo_python = self.compilar_codigo(codigo_fonte)
            
            if codigo_python is None:
                return False
            
            # Salvar arquivo apenas se solicitado
            if salvar_arquivo:
                if arquivo_saida is None:
                    arquivo_saida = caminho_arquivo.replace('.por', '.py')
                
                with open(arquivo_saida, 'w', encoding='utf-8') as arquivo:
                    arquivo.write(codigo_python)
                
                if self.debug:
                    print(f"‚úì Arquivo salvo: {arquivo_saida}")
            
            # Executar c√≥digo diretamente
            if self.debug:
                print("üöÄ Executando...")
                print("-" * 30)
            
            # Criar namespace global para execu√ß√£o
            global_namespace = {
                '__name__': '__main__',
                '__builtins__': __builtins__
            }
            
            # Executar c√≥digo Python
            exec(codigo_python, global_namespace)
            
            if self.debug:
                print("-" * 30)
                print("‚úÖ Execu√ß√£o conclu√≠da")
            
            return True
            
        except FileNotFoundError:
            print(f"Erro: Arquivo '{caminho_arquivo}' n√£o encontrado.")
            return False
        except Exception as e:
            print(f"Erro inesperado: {e}")
            return False

    def compilar_codigo(self, codigo_fonte: str) -> Optional[str]:
        """
        Compila c√≥digo Portugol para Python
        
        Args:
            codigo_fonte: C√≥digo fonte em Portugol
            
        Returns:
            str: C√≥digo Python gerado, ou None se houve erro
        """
        try:
            if self.debug:
                print("üìù Iniciando compila√ß√£o...")
                print("=" * 40)
            
            # Fase 1: An√°lise L√©xica
            if self.debug:
                print("üîç An√°lise L√©xica")
            
            lexer = Lexer(codigo_fonte)
            
            if self.debug:
                print("   ‚úì Lexer inicializado")
            
            # Fase 2: An√°lise Sint√°tica
            if self.debug:
                print("üå≥ An√°lise Sint√°tica")
            
            parser = Parser(lexer)
            ast = parser.analisar()
            
            if self.debug:
                print("   ‚úì AST constru√≠da")
                print(f"   - Declara√ß√µes: {len(ast.declaracoes)}")
                print(f"   - Comandos: {len(ast.comandos)}")
            
            # Fase 3: An√°lise Sem√¢ntica
            if self.debug:
                print("üî¨ An√°lise Sem√¢ntica")
            
            analisador_semantico = AnalisadorSemantico()
            analisador_semantico.analisar(ast)
            
            if self.debug:
                print("   ‚úì An√°lise conclu√≠da")
                print(f"   - Vari√°veis: {len(analisador_semantico.tabela_simbolos.simbolos)}")
            
            # Fase 4: Gera√ß√£o de C√≥digo
            if self.debug:
                print("‚öôÔ∏è  Gera√ß√£o de C√≥digo")
            
            gerador = GeradorDeCodigo()
            codigo_python = gerador.gerar(ast)
            
            if self.debug:
                print("   ‚úì C√≥digo gerado")
                print(f"   - Linhas: {len(codigo_python.split())}")
                print("=" * 40)
                print("‚úÖ Compila√ß√£o conclu√≠da")
            
            return codigo_python
            
        except CompiladorError as e:
            print(f"‚ùå Erro de compila√ß√£o: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado durante compila√ß√£o: {e}")
            if self.debug:
                import traceback
                traceback.print_exc()
            return None

    def executar_compilacao_e_teste(self, codigo_fonte: str) -> bool:
        """
        Compila e executa o c√≥digo para teste
        
        Args:
            codigo_fonte: C√≥digo fonte em Portugol
            
        Returns:
            bool: True se compila√ß√£o e execu√ß√£o foram bem-sucedidas
        """
        try:
            # Compilar
            codigo_python = self.compilar_codigo(codigo_fonte)
            
            if codigo_python is None:
                return False
            
            if self.debug:
                print("\nüöÄ Executando c√≥digo gerado:")
                print("-" * 30)
            
            # Executar c√≥digo Python gerado
            exec(codigo_python)
            
            if self.debug:
                print("-" * 30)
                print("‚úÖ Execu√ß√£o conclu√≠da com sucesso!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o: {e}")
            if self.debug:
                import traceback
                traceback.print_exc()
            return False

    def listar_tokens(self, codigo_fonte: str) -> None:
        """
        Lista todos os tokens do c√≥digo fonte (para debug)
        
        Args:
            codigo_fonte: C√≥digo fonte em Portugol
        """
        try:
            print("üîç An√°lise de Tokens:")
            print("-" * 40)
            
            lexer = Lexer(codigo_fonte)
            tokens = []
            
            while True:
                token = lexer.proximo_token()
                tokens.append(token)
                
                print(f"  {token.tipo.value:15} | {token.lexema:10} | L:{token.linha} C:{token.coluna}")
                
                if token.tipo.value == 'EOF':
                    break
            
            print("-" * 40)
            print(f"Total de tokens: {len(tokens)}")
            
        except CompiladorError as e:
            print(f"‚ùå Erro na an√°lise l√©xica: {e}")


def main():
    """Fun√ß√£o principal para uso via linha de comando"""
    if len(sys.argv) < 2:
        print("Uso: python -m src.main <arquivo.por> [--debug] [--save]")
        print("Exemplo: python -m src.main programa.por --debug")
        print("         python -m src.main programa.por --save  # Para salvar arquivo .py")
        return
    
    arquivo_entrada = sys.argv[1]
    debug = '--debug' in sys.argv
    salvar = '--save' in sys.argv
    
    compilador = CompiladorPortugol(debug=debug)
    
    if '--tokens' in sys.argv:
        # Modo de listagem de tokens
        try:
            with open(arquivo_entrada, 'r', encoding='utf-8') as f:
                codigo = f.read()
            compilador.listar_tokens(codigo)
        except FileNotFoundError:
            print(f"Arquivo '{arquivo_entrada}' n√£o encontrado.")
    else:
        # Compila√ß√£o normal
        sucesso = compilador.compilar_arquivo(arquivo_entrada, salvar_arquivo=salvar)
        sys.exit(0 if sucesso else 1)


if __name__ == '__main__':
    main()