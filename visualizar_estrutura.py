"""
Visualizador da Estrutura do Projeto Modularizado

Este script mostra a estrutura final do projeto ap√≥s a modulariza√ß√£o
e fornece estat√≠sticas comparativas.
"""

import os
import glob
from pathlib import Path

def contar_linhas_arquivo(caminho):
    """Conta linhas de c√≥digo em um arquivo"""
    try:
        with open(caminho, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
            # Filtrar linhas vazias e coment√°rios
            linhas_codigo = []
            for linha in linhas:
                linha_limpa = linha.strip()
                if linha_limpa and not linha_limpa.startswith('#') and not linha_limpa.startswith('"""'):
                    linhas_codigo.append(linha)
            return len(linhas), len(linhas_codigo)
    except:
        return 0, 0

def analisar_estrutura():
    """Analisa a estrutura do projeto"""
    print("üìä AN√ÅLISE DA ESTRUTURA DO PROJETO")
    print("=" * 70)
    
    # Diret√≥rio raiz
    raiz = Path(".")
    
    # Estat√≠sticas gerais
    total_linhas = 0
    total_codigo = 0
    arquivos_analisados = []
    
    print("üìÅ ESTRUTURA DE ARQUIVOS:")
    print("-" * 70)
    
    # Arquivo monol√≠tico original
    if os.path.exists("programa.py"):
        linhas, codigo = contar_linhas_arquivo("programa.py")
        total_linhas += linhas
        total_codigo += codigo
        arquivos_analisados.append(("programa.py", linhas, codigo, "Vers√£o monol√≠tica"))
        print(f"üèóÔ∏è  programa.py                    {linhas:4d} linhas ({codigo:3d} c√≥digo)")
    
    # Arquivos do diret√≥rio src/
    if os.path.exists("src"):
        print("üì¶ src/                             (Vers√£o modularizada)")
        
        arquivos_src = [
            ("__init__.py", "Configura√ß√£o do pacote"),
            ("exceptions.py", "Hierarquia de exce√ß√µes"),
            ("ast_nodes.py", "Defini√ß√µes da AST"),
            ("lexer.py", "Analisador l√©xico"),
            ("parser.py", "Analisador sint√°tico"),
            ("semantic.py", "Analisador sem√¢ntico"),
            ("codegen.py", "Gerador de c√≥digo"),
            ("main.py", "Compilador principal")
        ]
        
        for arquivo, descricao in arquivos_src:
            caminho = f"src/{arquivo}"
            if os.path.exists(caminho):
                linhas, codigo = contar_linhas_arquivo(caminho)
                total_linhas += linhas
                total_codigo += codigo
                arquivos_analisados.append((caminho, linhas, codigo, descricao))
                print(f"   ‚îú‚îÄ‚îÄ {arquivo:<20} {linhas:4d} linhas ({codigo:3d} c√≥digo) - {descricao}")
    
    # Arquivos de teste e documenta√ß√£o
    print("\nüìù ARQUIVOS DE TESTE E DOCUMENTA√á√ÉO:")
    print("-" * 70)
    
    outros_arquivos = [
        ("programa.por", "Programa de teste"),
        ("teste_modularizacao.py", "Teste da modulariza√ß√£o"),
        ("teste_comparacao.py", "Valida√ß√£o final"),
        ("README_Modularizacao.md", "Documenta√ß√£o")
    ]
    
    for arquivo, descricao in outros_arquivos:
        if os.path.exists(arquivo):
            linhas, codigo = contar_linhas_arquivo(arquivo)
            print(f"üìÑ {arquivo:<25} {linhas:4d} linhas - {descricao}")
    
    print("\n" + "=" * 70)
    print("üìà ESTAT√çSTICAS COMPARATIVAS")
    print("=" * 70)
    
    # Separar monol√≠tico vs modular
    monolitico = [a for a in arquivos_analisados if "programa.py" in a[0]]
    modular = [a for a in arquivos_analisados if a[0].startswith("src/")]
    
    if monolitico:
        print("üèóÔ∏è  VERS√ÉO MONOL√çTICA:")
        for arquivo, linhas, codigo, desc in monolitico:
            print(f"   {arquivo}: {linhas} linhas ({codigo} c√≥digo)")
    
    if modular:
        print("\nüì¶ VERS√ÉO MODULARIZADA:")
        total_mod_linhas = sum(a[1] for a in modular)
        total_mod_codigo = sum(a[2] for a in modular)
        
        for arquivo, linhas, codigo, desc in modular:
            print(f"   {arquivo}: {linhas} linhas ({codigo} c√≥digo)")
        
        print(f"\n   üìä Total modular: {total_mod_linhas} linhas ({total_mod_codigo} c√≥digo)")
        print(f"   üìÇ N√∫mero de m√≥dulos: {len(modular)}")
        print(f"   üìê M√©dia por m√≥dulo: {total_mod_linhas // len(modular)} linhas")
    
    print("\n" + "=" * 70)
    print("üéØ BENEF√çCIOS DA MODULARIZA√á√ÉO")
    print("=" * 70)
    
    beneficios = [
        "‚úÖ Separa√ß√£o clara de responsabilidades",
        "‚úÖ C√≥digo mais leg√≠vel e organizando",
        "‚úÖ Facilidade para testes unit√°rios",
        "‚úÖ Manuten√ß√£o localizada por m√≥dulo",
        "‚úÖ Possibilidade de reutiliza√ß√£o",
        "‚úÖ Desenvolvimento em equipe facilitado",
        "‚úÖ Extensibilidade para novos recursos",
        "‚úÖ Debug mais eficiente por fase"
    ]
    
    for beneficio in beneficios:
        print(f"   {beneficio}")
    
    print("\n" + "=" * 70)
    print("üöÄ FASES DE COMPILA√á√ÉO MODULARIZADAS")
    print("=" * 70)
    
    fases = [
        ("üîç Fase 1", "An√°lise L√©xica", "src/lexer.py", "Tokeniza√ß√£o do c√≥digo"),
        ("üå≥ Fase 2", "An√°lise Sint√°tica", "src/parser.py", "Constru√ß√£o da AST"),
        ("üî¨ Fase 3", "An√°lise Sem√¢ntica", "src/semantic.py", "Verifica√ß√£o de tipos"),
        ("‚öôÔ∏è  Fase 4", "Gera√ß√£o de C√≥digo", "src/codegen.py", "Produ√ß√£o do Python")
    ]
    
    for icone, nome, arquivo, descricao in fases:
        print(f"{icone} {nome:<18} | {arquivo:<15} | {descricao}")
    
    print("\n" + "=" * 70)
    print("‚ú® MODULARIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("üèÜ Projeto segue as melhores pr√°ticas de engenharia de software")
    print("=" * 70)

if __name__ == "__main__":
    analisar_estrutura()